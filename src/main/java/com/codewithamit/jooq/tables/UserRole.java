/*
 * This file is generated by jOOQ.
 */
package com.codewithamit.jooq.tables;


import com.codewithamit.jooq.BlogAppApis;
import com.codewithamit.jooq.Keys;
import com.codewithamit.jooq.tables.records.UserRoleRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRole extends TableImpl<UserRoleRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>blog-app-apis.user_role</code>
     */
    public static final UserRole USER_ROLE = new UserRole();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRoleRecord> getRecordType() {
        return UserRoleRecord.class;
    }

    /**
     * The column <code>blog-app-apis.user_role.users</code>.
     */
    public final TableField<UserRoleRecord, Integer> USERS = createField(DSL.name("users"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>blog-app-apis.user_role.role</code>.
     */
    public final TableField<UserRoleRecord, Integer> ROLE = createField(DSL.name("role"), SQLDataType.INTEGER.nullable(false), this, "");

    private UserRole(Name alias, Table<UserRoleRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRole(Name alias, Table<UserRoleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>blog-app-apis.user_role</code> table reference
     */
    public UserRole(String alias) {
        this(DSL.name(alias), USER_ROLE);
    }

    /**
     * Create an aliased <code>blog-app-apis.user_role</code> table reference
     */
    public UserRole(Name alias) {
        this(alias, USER_ROLE);
    }

    /**
     * Create a <code>blog-app-apis.user_role</code> table reference
     */
    public UserRole() {
        this(DSL.name("user_role"), null);
    }

    public <O extends Record> UserRole(Table<O> child, ForeignKey<O, UserRoleRecord> key) {
        super(child, key, USER_ROLE);
    }

    @Override
    public Schema getSchema() {
        return BlogAppApis.BLOG_APP_APIS;
    }

    @Override
    public List<ForeignKey<UserRoleRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserRoleRecord, ?>>asList(Keys.FK6513MBU5EM1WSL88XIVF5EK2M, Keys.FKBUP990IGVUKH84QIHO5RENPI2);
    }

    private transient Users _users;
    private transient Role _role;

    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FK6513MBU5EM1WSL88XIVF5EK2M);

        return _users;
    }

    public Role role() {
        if (_role == null)
            _role = new Role(this, Keys.FKBUP990IGVUKH84QIHO5RENPI2);

        return _role;
    }

    @Override
    public UserRole as(String alias) {
        return new UserRole(DSL.name(alias), this);
    }

    @Override
    public UserRole as(Name alias) {
        return new UserRole(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRole rename(String name) {
        return new UserRole(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRole rename(Name name) {
        return new UserRole(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
